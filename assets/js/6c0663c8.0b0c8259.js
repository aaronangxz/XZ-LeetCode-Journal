"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[1573],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),f=i,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9046:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),l=["components"],a={id:"linkedlist",sidebar_position:1,displayed_sidebar:"notesSideBar"},s="Linked List",c={unversionedId:"notes/Data Structures/linkedlist",id:"notes/Data Structures/linkedlist",title:"Linked List",description:"Introduction",source:"@site/docs/notes/Data Structures/LinkedList.md",sourceDirName:"notes/Data Structures",slug:"/notes/Data Structures/linkedlist",permalink:"/XZ-LeetCode-Journal/docs/notes/Data Structures/linkedlist",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"linkedlist",sidebar_position:1,displayed_sidebar:"notesSideBar"},sidebar:"notesSideBar",previous:{title:"Multi Threading",permalink:"/XZ-LeetCode-Journal/docs/notes/CS fundamentals/Multi Threading"},next:{title:"Queues",permalink:"/XZ-LeetCode-Journal/docs/notes/Data Structures/queues"}},u={},d=[{value:"Introduction",id:"introduction",level:3},{value:"Complexities",id:"complexities",level:3},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Write",id:"write",level:5},{value:"Access",id:"access",level:5},{value:"Implementation",id:"implementation",level:3},{value:"Go Singly Linked List",id:"go-singly-linked-list",level:4}],p={toc:d};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"linked-list"},"Linked List"),(0,o.kt)("h3",{id:"introduction"},"Introduction"),(0,o.kt)("h3",{id:"complexities"},"Complexities"),(0,o.kt)("h4",{id:"time-complexity"},"Time Complexity"),(0,o.kt)("h5",{id:"write"},"Write"),(0,o.kt)("h5",{id:"access"},"Access"),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("h4",{id:"go-singly-linked-list"},"Go Singly Linked List"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"\ntype ListNode struct {\n    data interface{}\n    next *ListNode\n}\n\nfunc main() {\n    s := []int{1, 2, 3, 4, 5}\n    l := new(ListNode)\n    var curr *ListNode = l\n    var prev *ListNode\n\n    //Fills linked list with elements in slice\n    for i := range s {\n        if i == 0{\n            l.data = s[0]\n        }\n\n        if curr == nil {\n            curr = new(ListNode)\n            curr.data = s[i]\n            prev.next = curr\n        }\n        prev = curr\n        curr = curr.next\n    }\n\n    //Prints nodes in linked list\n    for l != nil {\n        fmt.Println(l.data)\n        l = l.next\n    }\n}\n")))}f.isMDXComponent=!0}}]);