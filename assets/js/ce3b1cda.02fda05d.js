"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[6539],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4179:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return c}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),l=["components"],a={sidebar_position:21},s="21. Merge Two Sorted Lists",u={unversionedId:"tutorial-basics/Merge Two Sorted Lists",id:"tutorial-basics/Merge Two Sorted Lists",title:"21. Merge Two Sorted Lists",description:"Question",source:"@site/docs/tutorial-basics/21. Merge Two Sorted Lists.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Merge Two Sorted Lists",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Merge Two Sorted Lists",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/21. Merge Two Sorted Lists.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21},sidebar:"tutorialSidebar",previous:{title:"20. Valid Parentheses",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Valid Parentheses"},next:{title:"53. Maximum Subarray",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Maximum Subarray"}},p={},c=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"21-merge-two-sorted-lists"},"21. Merge Two Sorted Lists"),(0,o.kt)("h2",{id:"question"},"Question"),(0,o.kt)("p",null,"You are given the heads of two sorted linked lists ",(0,o.kt)("inlineCode",{parentName:"p"},"list1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"list2"),"."),(0,o.kt)("p",null,"Merge the two lists in a one ",(0,o.kt)("strong",{parentName:"p"},"sorted")," list. The list should be made by splicing together the nodes of the first two lists."),(0,o.kt)("p",null,"Return the head of the merged linked list."),(0,o.kt)("p",null,"Example 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n")),(0,o.kt)("p",null,"Example 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: list1 = [], list2 = []\nOutput: []\n")),(0,o.kt)("p",null,"Example 3:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: list1 = [], list2 = [0]\nOutput: [0]\n")),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"- The number of nodes in both lists is in the range [0, 50].\n- -100 <= Node.val <= 100\n- Both list1 and list2 are sorted in non-decreasing order.\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If both Lists are empty, return empty. If any of them are empty, return the non empty one."),(0,o.kt)("li",{parentName:"ol"},"Create a new List node ",(0,o.kt)("inlineCode",{parentName:"li"},"head")," (to return later) and a copy ",(0,o.kt)("inlineCode",{parentName:"li"},"curr"),"."),(0,o.kt)("li",{parentName:"ol"},"Traverse the linked list until the end of either list, compare the value of ",(0,o.kt)("inlineCode",{parentName:"li"},"list1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"list2"),", then link the smaller node to ",(0,o.kt)("inlineCode",{parentName:"li"},"curr"),"."),(0,o.kt)("li",{parentName:"ol"},"Move to the next node if the element from that list is used."),(0,o.kt)("li",{parentName:"ol"},"We might still have some leftovers nodes since we exited step 3 when either one of it runs out."),(0,o.kt)("li",{parentName:"ol"},"It is not necessary to traverse anymore, simply link the whole remaining list behind ",(0,o.kt)("inlineCode",{parentName:"li"},"curr"),".")),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"//Definition for singly-linked list.\ntype ListNode struct {\n    Val int\n    Next *ListNode\n}\n\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    if list1 == nil && list2 == nil{\n        return nil;\n    } else if list1 == nil{\n        return list2\n    }else if list2 == nil{\n        return list1;\n    }\n    \n    head := &ListNode{0,nil}\n    curr := head\n    \n    for {\n        if (list1 == nil || list2 == nil){\n            break\n        }\n        \n        if list1.Val < list2.Val{\n            curr.Next = list1\n            list1 = list1.Next\n        }else{\n            curr.Next = list2\n            list2 = list2.Next\n        }\n        curr = curr.Next\n    }\n    \n    if(list1 != nil){\n        curr.Next = list1\n    }else{\n        curr.Next = list2\n    }\n    return head.Next;\n}\n")))}m.isMDXComponent=!0}}]);