"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[8296],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6599:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={displayed_sidebar:"notesSideBar"},l="Go",c={unversionedId:"notes/Languages/Go",id:"notes/Languages/Go",title:"Go",description:"Loops",source:"@site/docs/notes/Languages/Go.md",sourceDirName:"notes/Languages",slug:"/notes/Languages/Go",permalink:"/XZ-LeetCode-Journal/docs/notes/Languages/Go",tags:[],version:"current",frontMatter:{displayed_sidebar:"notesSideBar"},sidebar:"notesSideBar",previous:{title:"Redis",permalink:"/XZ-LeetCode-Journal/docs/notes/Infrastructure/Redis"},next:{title:"Rate Limiter",permalink:"/XZ-LeetCode-Journal/docs/notes/System Design/RateLimiter"}},p={},u=[{value:"Loops",id:"loops",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Function headers",id:"function-headers",level:3},{value:"Reflect",id:"reflect",level:3},{value:"Pointers",id:"pointers",level:3}],d={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"go"},"Go"),(0,o.kt)("h3",{id:"loops"},"Loops"),(0,o.kt)("p",null,"There is no while loop in Go."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"//Range loop using only index\nfor i := range a {}\n\n//Range loop using both index and elements\nfor i, obj := range a{}\n\n//Range loop using only elements\nfor _, obj := range a{}\n\n//Infinite while loop\nfor{}\n\n//While loop with exit condition\nfor a != nil{}\n")),(0,o.kt)("h3",{id:"interfaces"},"Interfaces"),(0,o.kt)("p",null,"An interface type is defined as a set of method signatures. A value of interface type can hold any value that implements those methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"//Function that takes in any data type\nfunc Do(a interface{})\n\n//Struct that can be any other struct\ntype Do interface{\n    thing string\n}\n")),(0,o.kt)("h3",{id:"function-headers"},"Function headers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (a *A) DoSomething (b interface{},c ...interface{}) d interface{}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(a *int)")," : ",(0,o.kt)("inlineCode",{parentName:"p"},"DoSomething")," is a method of object ",(0,o.kt)("inlineCode",{parentName:"p"},"A")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"b interface{}")," : which takes in any data type as the function parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"b")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"c ...interface{}")," : and also takes in an optional parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"c")," of any data type"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"d interface{}")," : then returns ",(0,o.kt)("inlineCode",{parentName:"p"},"d")),(0,o.kt)("h3",{id:"reflect"},"Reflect"),(0,o.kt)("h3",{id:"pointers"},"Pointers"),(0,o.kt)("p",null,"To update a slice within a function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"//Append\nfunc update(s []string, a string){\n    *s = append(*s, a)\n}\n\n//Slice off\nfunc sliceFirstElement(s []string){\n    *s = (*s)[:1]\n}\n\n//Swapping slice elements can be done directly because the slice passed inside still points to the same address as the slice outside of the function\nfunc swap(s []string){\n    tmp := s[0]\n    s[0] = s[1]\n    s[1] = tmp\n}\n")))}f.isMDXComponent=!0}}]);