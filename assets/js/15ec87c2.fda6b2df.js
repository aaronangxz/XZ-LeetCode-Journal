"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[3356],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},515:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:392},l="392. Is Subsequence",u={unversionedId:"tutorial-basics/Is Subsequence",id:"tutorial-basics/Is Subsequence",title:"392. Is Subsequence",description:"Question",source:"@site/docs/tutorial-basics/392. Is Subsequence.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Is Subsequence",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Is Subsequence",editUrl:"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/master/docs/tutorial-basics/392. Is Subsequence.md",tags:[],version:"current",sidebarPosition:392,frontMatter:{sidebar_position:392},sidebar:"tutorialSidebar",previous:{title:"338. Counting Bits",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Counting Bits"},next:{title:"1592. Rearrange Spaces Between Words",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Rearrange Spaces Between Words"}},c={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"392-is-subsequence"},"392. Is Subsequence"),(0,i.kt)("h2",{id:"question"},"Question"),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is a ",(0,i.kt)("strong",{parentName:"p"},"subsequence")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"subsequence"),' of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "',(0,i.kt)("inlineCode",{parentName:"p"},"ace"),'" is a subsequence of "',(0,i.kt)("inlineCode",{parentName:"p"},"abcde"),'" while "',(0,i.kt)("inlineCode",{parentName:"p"},"aec"),'" is not).'),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "abc", t = "ahbgdc"\nOutput: true\n')),(0,i.kt)("p",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "axc", t = "ahbgdc"\nOutput: false\n')),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0 <= s.length <= 100\n0 <= t.length <= 104\ns and t consist only of lowercase English letters.\n")),(0,i.kt)("p",null,"Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"approach"},"Approach"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Iterate through ",(0,i.kt)("inlineCode",{parentName:"li"},"t"),", and match against ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," start from the first index in ",(0,i.kt)("inlineCode",{parentName:"li"},"s"),"."),(0,i.kt)("li",{parentName:"ol"},"If there is a match, move to the next index in ",(0,i.kt)("inlineCode",{parentName:"li"},"s"),", and also take note of the index of the previous matched element."),(0,i.kt)("li",{parentName:"ol"},"After iterate through all elements in ",(0,i.kt)("inlineCode",{parentName:"li"},"t")," if index of ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," is not at the end, that means some elements weren't matched.")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        int j = 0;\n        \n        for(int i = 0; i < t.size(); i++) if(t[i] == s[j]) j++;\n        \n        if(j != s.size()) return false;\n        \n        return true;\n    }\n};\n")))}m.isMDXComponent=!0}}]);