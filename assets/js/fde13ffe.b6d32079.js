"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[2327],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=r,g=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7884:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],i={sidebar_position:53,tags:["Dynamic Programming","Kadane\u2019s Algorithm"]},u="53. Maximum Subarray",s={unversionedId:"tutorial-basics/Maximum Subarray",id:"tutorial-basics/Maximum Subarray",title:"53. Maximum Subarray",description:"Question",source:"@site/docs/tutorial-basics/53. Maximum Subarray.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Maximum Subarray",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Maximum Subarray",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/53. Maximum Subarray.md",tags:[{label:"Dynamic Programming",permalink:"/XZ-LeetCode-Journal/docs/tags/dynamic-programming"},{label:"Kadane\u2019s Algorithm",permalink:"/XZ-LeetCode-Journal/docs/tags/kadanes-algorithm"}],version:"current",sidebarPosition:53,frontMatter:{sidebar_position:53,tags:["Dynamic Programming","Kadane\u2019s Algorithm"]},sidebar:"tutorialSidebar",previous:{title:"21. Merge Two Sorted Lists",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Merge Two Sorted Lists"},next:{title:"[WIP] 88. Merge Sorted Array",permalink:"/XZ-LeetCode-Journal/docs/tutorial-basics/Merge Sorted Array"}},m={},c=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],p={toc:c};function d(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"53-maximum-subarray"},"53. Maximum Subarray"),(0,o.kt)("h2",{id:"question"},"Question"),(0,o.kt)("p",null,"Given an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."),(0,o.kt)("p",null,"A subarray is a contiguous part of an array."),(0,o.kt)("p",null,"Example 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n")),(0,o.kt)("p",null,"Tracking:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"At nums[0] => -2\nlocal_max = -2, global_max = -2\n\nAt nums[1] => 1\nlocal_max = 1, global_max = 1\n\nAt nums[2] => -3\nlocal_max = -2, global_max = 1\n\n***** Start of contiguous sub array *****\nThis is where the global_max increases\n\nAt nums[3] => 4\nlocal_max = 4, global_max = 4\n\nAt nums[4] => -1\nlocal_max = 3, global_max = 4\n\nAt nums[5] => 2\nlocal_max = 5, global_max = 5\n\nAt nums[6] => 1\nlocal_max = 6, global_max = 6\n\n***** End of contiguous sub array *****\nThis is where the local_max decreases\n\nAt nums[7] => -5\nlocal_max = 1, global_max = 6\n\nAt nums[8] => 4\nlocal_max = 5, global_max = 6\n")),(0,o.kt)("p",null,"Example 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1]\nOutput: 1\n")),(0,o.kt)("p",null,"Example 3:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [5,4,-1,7,8]\nOutput: 23\n")),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"- 1 <= nums.length <= 105\n- -104 <= nums[i] <= 104\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Using Kadane\u2019s Algorithm - Nice article here ",(0,o.kt)("a",{parentName:"li",href:"https://medium.com/@rsinghal757/kadanes-algorithm-dynamic-programming-how-and-why-does-it-work-3fd8849ed73d"},"Kadane\u2019s Algorithm \u2014 (Dynamic Programming) \u2014 How and Why does it Work?")),(0,o.kt)("li",{parentName:"ol"},"While iterating through the array, calculate the current max and save as ",(0,o.kt)("inlineCode",{parentName:"li"},"local_max"),"."),(0,o.kt)("li",{parentName:"ol"},"After which, update the maximum ",(0,o.kt)("inlineCode",{parentName:"li"},"global_max")," when ",(0,o.kt)("inlineCode",{parentName:"li"},"local_max")," is greater, this is the greatest sum of the contiguous sub array.")),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int local_max = 0;\n        int global_max = INT_MIN;\n        \n        for(int i = 0; i < nums.size(); i++){\n            local_max = max(nums[i], local_max + nums[i]);\n            global_max = local_max > global_max ? local_max : global_max;\n        }\n        return global_max;\n    }\n};\n")))}d.isMDXComponent=!0}}]);