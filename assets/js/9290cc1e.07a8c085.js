"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[6885],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9100:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),l=["components"],a={displayed_sidebar:"notesSideBar"},c="Bubble Sort",s={unversionedId:"notes/Algorithms/Sorting/BubbleSort",id:"notes/Algorithms/Sorting/BubbleSort",title:"Bubble Sort",description:"- Iterate through the array elements one by one, and check if one is greater than the other.",source:"@site/docs/notes/Algorithms/Sorting/BubbleSort.md",sourceDirName:"notes/Algorithms/Sorting",slug:"/notes/Algorithms/Sorting/BubbleSort",permalink:"/XZ-LeetCode-Journal/docs/notes/Algorithms/Sorting/BubbleSort",tags:[],version:"current",frontMatter:{displayed_sidebar:"notesSideBar"},sidebar:"notesSideBar",previous:{title:"Binary Search",permalink:"/XZ-LeetCode-Journal/docs/notes/Algorithms/Searching/BinarySearch"},next:{title:"Selection Sort",permalink:"/XZ-LeetCode-Journal/docs/notes/Algorithms/Sorting/SelectionSort"}},u={},p=[{value:"Complexities",id:"complexities",level:3},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Space Complexity",id:"space-complexity",level:4},{value:"Implementation",id:"implementation",level:4}],m={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bubble-sort"},"Bubble Sort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Iterate through the array elements one by one, and check if one is greater than the other."),(0,i.kt)("li",{parentName:"ul"},"If yes, swap the two elements"),(0,i.kt)("li",{parentName:"ul"},"After every run, it is guranteed that the last element will be sorted. We can slowly make the range smller by 1 element each time, hence ",(0,i.kt)("inlineCode",{parentName:"li"},"j < len(slice)-i-1")),(0,i.kt)("li",{parentName:"ul"},"Optimized: If no elements were swapped after the first iteration, that means no element is out of order. We can stop sorting.")),(0,i.kt)("h3",{id:"complexities"},"Complexities"),(0,i.kt)("h4",{id:"time-complexity"},"Time Complexity"),(0,i.kt)("p",null,"O(N) Best case - When elements are already sorted"),(0,i.kt)("p",null,"O(N^2) On average - Total number of comparisons = n(n-1)/2"),(0,i.kt)("p",null,"O(N^2) Worst case - When array is reversed sorted"),(0,i.kt)("h4",{id:"space-complexity"},"Space Complexity"),(0,i.kt)("p",null,"O(1)"),(0,i.kt)("h4",{id:"implementation"},"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func bubbleSort(slice []int) {\n    for i := 0; i < len(slice); i++ {\n        for j := 0; j < len(slice)-i-1; j++ {\n            if slice[j] > slice[j+1] {\n                tmp := slice[j+1]\n                slice[j+1] = slice[j]\n                slice[j] = tmp\n            }\n        }\n    }\n}\n\nfunc bubbleSortOptimized(slice []int) {\n    swapped := false\n    for i := 0; i < len(slice); i++ {\n        for j := 0; j < len(slice)-i-1; j++ {\n            if slice[j] > slice[j+1] {\n                tmp := slice[j+1]\n                slice[j+1] = slice[j]\n                slice[j] = tmp\n                swapped = true\n            }\n            if !swapped {\n                break\n            }\n        }\n    }\n}\n\nfunc main(){\n    b := []int{33, 1, 5, 8, 22, 1, 55, 5, 99, 123, 90, 456, 333, 890, 1000, 999}\n    fmt.Println("Before:", b)\n    bubbleSort(b)\n    fmt.Println("After:", b)\n\n    c := []int{33, 1, 5, 8, 22, 1, 55, 5, 99, 123, 90, 456, 333, 890, 1000, 999}\n    fmt.Println("Before:", c)\n    bubbleSortOptimized(c)\n    fmt.Println("After:", c)\n}\n')))}f.isMDXComponent=!0}}]);