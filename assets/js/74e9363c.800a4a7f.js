"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[2064],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3229:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={sidebar_position:856},s="[WIP] 856. Score of Parentheses",u={unversionedId:"medium/Score of Parentheses",id:"medium/Score of Parentheses",title:"[WIP] 856. Score of Parentheses",description:"Question",source:"@site/docs/medium/856. Score of Parentheses.md",sourceDirName:"medium",slug:"/medium/Score of Parentheses",permalink:"/docs/medium/Score of Parentheses",editUrl:"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/master/docs/medium/856. Score of Parentheses.md",tags:[],version:"current",sidebarPosition:856,frontMatter:{sidebar_position:856},sidebar:"tutorialSidebar",previous:{title:"763. Partition Labels",permalink:"/docs/medium/Partition Labels"},next:{title:"946. Validate Stack Sequences",permalink:"/docs/medium/Validate Stack Sequences"}},c={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],m={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wip-856-score-of-parentheses"},"[WIP]"," 856. Score of Parentheses"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"Given a balanced parentheses string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", return the ",(0,a.kt)("strong",{parentName:"p"},"score")," of the string."),(0,a.kt)("p",null,"The score of a balanced parentheses string is based on the following rule:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"()"')," has score ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AB")," has score ",(0,a.kt)("inlineCode",{parentName:"li"},"A + B"),", where ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"B")," are balanced parentheses strings."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"(A)")," has score ",(0,a.kt)("inlineCode",{parentName:"li"},"2 * A"),", where ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," is a balanced parentheses string.")),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "()"\nOutput: 1\n')),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "(())"\nOutput: 2\n')),(0,a.kt)("p",null,"Example 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "()()"\nOutput: 2\n')),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ","[0, 500]","."),(0,a.kt)("li",{parentName:"ul"},"-100 <= Node.val <= 100"),(0,a.kt)("li",{parentName:"ul"},"0 <= k <= 2 * 109")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int scoreOfParentheses(string s) {\n        stack<int> count;\n        int score = 0;\n        \n        for(int i = 0; i < s.size(); i++){\n            if(s[i] == '('){\n                count.push(score);\n                score = 0;\n            } else{\n                score += count.top() + max(score,1);\n                count.pop();\n            }\n        }\n        return score;\n    }\n};\n")))}d.isMDXComponent=!0}}]);