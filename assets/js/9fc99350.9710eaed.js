"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[4448],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2373:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:316},l="[WIP] 316. Remove Duplicate Letters",u={unversionedId:"tutorial-extras/Remove Duplicate Letters",id:"tutorial-extras/Remove Duplicate Letters",title:"[WIP] 316. Remove Duplicate Letters",description:"Question",source:"@site/docs/tutorial-extras/316. Remove Duplicate Letters.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/Remove Duplicate Letters",permalink:"/XZ-LeetCode-Journal/docs/tutorial-extras/Remove Duplicate Letters",editUrl:"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/master/docs/tutorial-extras/316. Remove Duplicate Letters.md",tags:[],version:"current",sidebarPosition:316,frontMatter:{sidebar_position:316},sidebar:"tutorialSidebar",previous:{title:"[WIP] 74. Search a 2D Matrix",permalink:"/XZ-LeetCode-Journal/docs/tutorial-extras/Search a 2D Matrix"},next:{title:"[WIP] 856. Score of Parentheses",permalink:"/XZ-LeetCode-Journal/docs/tutorial-extras/Score of Parentheses"}},c={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wip-316-remove-duplicate-letters"},"[WIP]"," 316. Remove Duplicate Letters"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", remove duplicate letters so that every letter appears once and only once. You must make sure your result is ",(0,a.kt)("strong",{parentName:"p"},"the smallest in lexicographical order")," among all possible results."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "bcabc"\nOutput: "abc"\n')),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "cbacdcbc"\nOutput: "acdb"\n')),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 <= s.length <= 104"),(0,a.kt)("li",{parentName:"ul"},"s consists of lowercase English letters.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string removeDuplicateLetters(string s) {\n        vector<int> lastIndex(26, 0);\n        for (int i = 0; i < s.length(); i++){\n            lastIndex[s[i] - 'a'] = i; // track the lastIndex of character presence\n        }\n        \n        vector<bool> seen(26, false); // keep track seen\n        stack<char> st;\n        \n        for (int i = 0; i < s.size(); i++) {\n            int curr = s[i] - 'a';\n            if (seen[curr]) continue; // if seen continue as we need to pick one char only\n            while(st.size() > 0 && st.top() > s[i] && i < lastIndex[st.top() - 'a']){\n                seen[st.top() - 'a'] = false; // pop out and mark unseen\n                st.pop();\n            }\n            st.push(s[i]); // add into stack\n            seen[curr] = true; // mark seen\n        }\n        \n        string ans = \"\";\n        while (st.size() > 0){\n            ans += st.top();\n            st.pop();\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n")))}m.isMDXComponent=!0}}]);