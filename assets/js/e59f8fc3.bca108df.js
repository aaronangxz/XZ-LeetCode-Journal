"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[6048],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||l;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8478:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return m}});var r=n(7462),o=n(3366),l=(n(7294),n(3905)),a=["components"],i={sidebar_position:230},u="230. Kth Smallest Element in a BST",s={unversionedId:"medium/Kth Smallest Element in a BST",id:"medium/Kth Smallest Element in a BST",title:"230. Kth Smallest Element in a BST",description:"Question",source:"@site/docs/medium/230. Kth Smallest Element in a BST.md",sourceDirName:"medium",slug:"/medium/Kth Smallest Element in a BST",permalink:"/XZ-LeetCode-Journal/docs/medium/Kth Smallest Element in a BST",editUrl:"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/master/docs/medium/230. Kth Smallest Element in a BST.md",tags:[],version:"current",sidebarPosition:230,frontMatter:{sidebar_position:230},sidebar:"tutorialSidebar",previous:{title:"[WIP] 74. Search a 2D Matrix",permalink:"/XZ-LeetCode-Journal/docs/medium/Search a 2D Matrix"},next:{title:"287. Find the Duplicate Number",permalink:"/XZ-LeetCode-Journal/docs/medium/Find the Duplicate Number"}},c={},m=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],p={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"230-kth-smallest-element-in-a-bst"},"230. Kth Smallest Element in a BST"),(0,l.kt)("h2",{id:"question"},"Question"),(0,l.kt)("p",null,"Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree."),(0,l.kt)("p",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root = [3,1,4,null,2], k = 1\nOutput: 1\n")),(0,l.kt)("p",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n")),(0,l.kt)("p",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The number of nodes in the tree is n."),(0,l.kt)("li",{parentName:"ul"},"1 <= k <= n <= 104"),(0,l.kt)("li",{parentName:"ul"},"0 <= Node.val <= 104")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"approach"},"Approach"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Perform in-order traversal to the left most node (Left most in BST is the node with the smallest value)"),(0,l.kt)("li",{parentName:"ol"},"When we reach the smallest node, unwind and goes backwards, until the ",(0,l.kt)("inlineCode",{parentName:"li"},"kth")," node from the smallest node.")),(0,l.kt)("h2",{id:"solution"},"Solution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int count = 1;\n    int val;\n    int kthSmallest(TreeNode* root, int k) {\n        smallestLeaf(root, k);\n        return val;\n    }\n    \n    void smallestLeaf(TreeNode* root, int k){\n        if(root==NULL) return;        \n        smallestLeaf(root->left, k);\n        findElem(root,k);\n    }\n    \n    void findElem(TreeNode* root, int k){\n        if(root == NULL) return;\n        \n        if(count == k) val = root->val;  \n        \n        count++;\n        kthSmallest(root->right,k);\n    }\n};\n")))}d.isMDXComponent=!0}}]);