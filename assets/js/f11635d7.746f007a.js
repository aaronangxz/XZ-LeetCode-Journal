"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[2639],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(n),m=i,d=h["".concat(p,".").concat(m)]||h[m]||c[m]||a;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},69:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={sidebar_position:71},p="71. Simplify Path",s={unversionedId:"medium/Simplify Path",id:"medium/Simplify Path",title:"71. Simplify Path",description:"Question",source:"@site/docs/medium/71. Simplify Path.md",sourceDirName:"medium",slug:"/medium/Simplify Path",permalink:"/XZ-LeetCode-Journal/docs/medium/Simplify Path",editUrl:"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/master/docs/medium/71. Simplify Path.md",tags:[],version:"current",sidebarPosition:71,frontMatter:{sidebar_position:71},sidebar:"tutorialSidebar",previous:{title:"[WIP] 61. Rotate List",permalink:"/XZ-LeetCode-Journal/docs/medium/Rotate List"},next:{title:"[WIP] 74. Search a 2D Matrix",permalink:"/XZ-LeetCode-Journal/docs/medium/Search a 2D Matrix"}},u={},c=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],h={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"71-simplify-path"},"71. Simplify Path"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"path"),", which is an ",(0,a.kt)("strong",{parentName:"p"},"absolute path")," (starting with a slash ",(0,a.kt)("inlineCode",{parentName:"p"},"'/'"),") to a file or directory in a Unix-style file system, convert it to the simplified ",(0,a.kt)("strong",{parentName:"p"},"canonical path"),"."),(0,a.kt)("p",null,"In a Unix-style file system, a period ",(0,a.kt)("inlineCode",{parentName:"p"},"'.'")," refers to the current directory, a double period ",(0,a.kt)("inlineCode",{parentName:"p"},"'..'")," refers to the directory up a level, and any multiple consecutive slashes (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"'//'"),") are treated as a single slash ",(0,a.kt)("inlineCode",{parentName:"p"},"'/'"),". For this problem, any other format of periods such as ",(0,a.kt)("inlineCode",{parentName:"p"},"'...'")," are treated as file/directory names."),(0,a.kt)("p",null,"The canonical path should have the following format:"),(0,a.kt)("p",null,"The path starts with a single slash ",(0,a.kt)("inlineCode",{parentName:"p"},"'/'"),".\nAny two directories are separated by a single slash ",(0,a.kt)("inlineCode",{parentName:"p"},"'/'"),".\nThe path does not end with a trailing ",(0,a.kt)("inlineCode",{parentName:"p"},"'/'"),".\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period ",(0,a.kt)("inlineCode",{parentName:"p"},"'.'")," or double period ",(0,a.kt)("inlineCode",{parentName:"p"},"'..'"),")\nReturn the simplified ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"canonical"))," path."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: path = "/home/"\nOutput: "/home"\nExplanation: Note that there is no trailing slash after the last directory name.\n')),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: path = "/../"\nOutput: "/"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n')),(0,a.kt)("p",null,"Example 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: path = "/home//foo/"\nOutput: "/home/foo"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n')),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 <= path.length <= 3000"),(0,a.kt)("li",{parentName:"ul"},"path consists of English letters, digits, period '.', slash '/' or '_'."),(0,a.kt)("li",{parentName:"ul"},"path is a valid absolute Unix path.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Iterate through the ",(0,a.kt)("inlineCode",{parentName:"li"},"path")," and look for directory names, i.e. those that are not ",(0,a.kt)("inlineCode",{parentName:"li"},"'/'")," and append into a string"),(0,a.kt)("li",{parentName:"ol"},"Once we found a ",(0,a.kt)("inlineCode",{parentName:"li"},"'/'"),", the string we appended just now will be one of the file directories name. If that's the case, push it onto the stack."),(0,a.kt)("li",{parentName:"ol"},"Else, if we encounter ",(0,a.kt)("inlineCode",{parentName:"li"},"'.'"),", we can ignore and proceed. If we encounter ",(0,a.kt)("inlineCode",{parentName:"li"},"'..'"),", we need to exit one level, which means we should pop off the top of the stack."),(0,a.kt)("li",{parentName:"ol"},"Because there isn't a ",(0,a.kt)("inlineCode",{parentName:"li"},"'/'")," at the end of ",(0,a.kt)("inlineCode",{parentName:"li"},"path"),", we need to check for one last time for the deepest level of file directory."),(0,a.kt)("li",{parentName:"ol"},"Append the final string by popping the stack, then iterate through the vector from the back to front (We need LILO here) and join each of the file directories with ",(0,a.kt)("inlineCode",{parentName:"li"},"'/'"),".")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string simplifyPath(string path) {\n        stack<string> pathS;\n        string curr;\n        \n        for(int i = 0; i < path.size(); i++){\n            if(path[i] != \'/\'){\n                curr += path[i];\n            }else{\n                if(curr.empty()) continue;\n                if(curr == "."){\n                    curr = "";\n                    continue;\n                }\n                if(curr == ".."){\n                    if(!pathS.empty()) pathS.pop();\n                    curr = "";\n                    continue;\n                }\n                pathS.push(curr);  \n                curr = "";\n            }\n        }\n        \n        if(!curr.empty()){\n            if(curr == ".."){\n                if(!pathS.empty()) pathS.pop();\n                curr = "";\n            } else if (curr == "."){\n                curr = "";\n            }else{\n                pathS.push(curr);  \n                curr = "";  \n            }\n        }\n        \n        vector<string> out;\n        string resp;\n        if(pathS.empty()) return "/";\n\n        while(!pathS.empty()){\n            out.push_back(pathS.top());\n            pathS.pop();\n        }\n        \n        for(int i = out.size() - 1; i >= 0; i--){\n            resp += "/" + out[i];\n        }\n        \n        return resp;\n    }\n};\n')))}m.isMDXComponent=!0}}]);