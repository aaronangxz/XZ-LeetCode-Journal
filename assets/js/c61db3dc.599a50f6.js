"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[1267],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6848:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Redis SET or HASH",authors:["xuanze"],tags:["projects","redis"]},s=void 0,p={permalink:"/XZ-LeetCode-Journal/blog/2022/06/17/redis-set-or-hash",editUrl:"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-06-17-redis-set-or-hash.mdx",source:"@site/blog/2022-06-17-redis-set-or-hash.mdx",title:"Redis SET or HASH",description:"Introduction",date:"2022-06-17T00:00:00.000Z",formattedDate:"June 17, 2022",tags:[{label:"projects",permalink:"/XZ-LeetCode-Journal/blog/tags/projects"},{label:"redis",permalink:"/XZ-LeetCode-Journal/blog/tags/redis"}],readingTime:3.49,truncated:!0,authors:[{name:"Ang Xuan Ze",title:"Noob coder",url:"https://github.com/aaronangxz",imageURL:"https://github.com/aaronangxz.png",key:"xuanze"}],frontMatter:{title:"Redis SET or HASH",authors:["xuanze"],tags:["projects","redis"]},prevItem:{title:"How long is a second?",permalink:"/XZ-LeetCode-Journal/blog/2022/06/17/how-long-is-a-second"}},d={authorsImageUrls:[void 0]},u=[{value:"Introduction",id:"introduction",level:2},{value:"What&#39;s the Plan",id:"whats-the-plan",level:2},{value:"Cool, Now What?",id:"cool-now-what",level:2},{value:"Technical Implementation",id:"technical-implementation",level:3},{value:"1. Naive",id:"1-naive",level:3},{value:"2. Slightly more elegant?",id:"2-slightly-more-elegant",level:3},{value:"3. Most recommended?",id:"3-most-recommended",level:3},{value:"So..",id:"so",level:2}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"So I was working on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aaronangxz/SeaDinner"},"SeaHungerGamesBot"),",\nand one major pain point was: when a certain user started the conversation, but did not proceed from there. (probably due to the hassle of copy-pasting the API key?)"),(0,o.kt)("p",null,"Since my current goal is to have as many active users as possible, that was a wasted opportunity.\nSo my objective was to keep track of the users that started pressing some commands, but backed off and disappear afterwards.\nI call them the ",(0,o.kt)("inlineCode",{parentName:"p"},"potential users"),"."),(0,o.kt)("h2",{id:"whats-the-plan"},"What's the Plan"),(0,o.kt)("p",null,"The initial plan is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Remind users to use the Bot if:\n- They have chatted with it before \n- It happened in the past month\n- They still did not provide their key in the past month\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For such users, store their ",(0,o.kt)("inlineCode",{parentName:"p"},"user_id")," and the time they call the commands.\nThis can be achieved easily since all ",(0,o.kt)("inlineCode",{parentName:"p"},"anonymous users")," (aka. those that did not provide their keys) will get routed through\na ",(0,o.kt)("inlineCode",{parentName:"p"},"CheckKey")," function, and if it does not exist in DB, they will be urged to provide their key in the next step in order to proceed with other features.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The reason we store the ",(0,o.kt)("inlineCode",{parentName:"p"},"time"),' is because we want to have a "cool down" period before we annoy them again. E.g. A user chatted on 1st Jan,\nwe will not send him the cold message until at least 1st Feb.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we did send him on 1st Feb, we reset the time to 1st Feb and the next message will be sent on 1st March. So on and so forth.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And if the user provide their key between 1st Feb and 1st March, we remove them from the pool and they will not receive this anymore."))),(0,o.kt)("h2",{id:"cool-now-what"},"Cool, Now What?"),(0,o.kt)("h3",{id:"technical-implementation"},"Technical Implementation"),(0,o.kt)("h3",{id:"1-naive"},"1. Naive"),(0,o.kt)("p",null,"The naive solution is to have a cache key, something like ",(0,o.kt)("inlineCode",{parentName:"p"},"potential_user:<user_id>")," with the value as ",(0,o.kt)("inlineCode",{parentName:"p"},"time"),". Since it is pretty straight forward, and we can ",(0,o.kt)("inlineCode",{parentName:"p"},"GET"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"SET")," the value easily."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Pros")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Easy peasy")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Cons")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Kinda messy")),(0,o.kt)("h3",{id:"2-slightly-more-elegant"},"2. Slightly more elegant?"),(0,o.kt)("p",null,"Then I thought of Redis Sets, and it is kinda what I prefer it to be. We can have a set called ",(0,o.kt)("inlineCode",{parentName:"p"},"potential_user"),", and inside the set, we have list of keys ",(0,o.kt)("inlineCode",{parentName:"p"},"<user_id>:<time>"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Pros")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Very organized, i love it")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Cons")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Need to store all the information in the ",(0,o.kt)("inlineCode",{parentName:"li"},"key"),", hence delimiter is needed."),(0,o.kt)("li",{parentName:"ul"},"Have to parse the key to get the relevant information."),(0,o.kt)("li",{parentName:"ul"},"Since they are not key-value pairs, in order to update the ",(0,o.kt)("inlineCode",{parentName:"li"},"time"),", we have to ",(0,o.kt)("inlineCode",{parentName:"li"},"SREM")," the old key and ",(0,o.kt)("inlineCode",{parentName:"li"},"SADD")," new one afterwards.")),(0,o.kt)("h3",{id:"3-most-recommended"},"3. Most recommended?"),(0,o.kt)("p",null,"I read up on ",(0,o.kt)("inlineCode",{parentName:"p"},"HASH"),", and it seems pretty decent (overkill maybe?) for this use case. And probably a refactor is neede to make it clean."),(0,o.kt)("p",null,"The key can be just ",(0,o.kt)("inlineCode",{parentName:"p"},"<user_id>"),", and contains field such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<user_key>")," (since we cache the keys to minimize DB calls), ",(0,o.kt)("inlineCode",{parentName:"p"},"<time>")," etc."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Pros")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Treat it as an object, and we do not need any extra keys anymore")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Cons")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When we need to find user that has ",(0,o.kt)("inlineCode",{parentName:"li"},"time")," (not everyone will have this field), we have to probably check one by one.")),(0,o.kt)("h2",{id:"so"},"So.."),(0,o.kt)("p",null,"I went with option 2, and implement a set. Only thing that I don't really like is the update part.\nNeed to remove first -> then re-write the updated time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'//Remove the old key and update with the new time in Set\n//As long as users do not give us the key, they will always be in the pool\n//We continuously update the time after each cold message to avoid annoyance\nif err := processors.RedisClient.SRem(common.POTENTIAL_USER_SET, pair).Err(); err != nil {\n    log.Error(ctx, "SendPotentialUsers | Error while writing to redis: %v", err.Error())\n} else {\n    log.Info(ctx, "SendPotentialUsers | Successful | Removed %v from potential_user set", pair)\n}\n\ntoWrite := fmt.Sprint(userID, ":", time.Now().Unix())\nif err := processors.RedisClient.SAdd(common.POTENTIAL_USER_SET, toWrite).Err(); err != nil {\n    log.Error(ctx, "SendPotentialUsers | Error while writing to redis: %v", err.Error())\n} else {\n    log.Info(ctx, "SendPotentialUsers | Successful | Written %v to potential_user set", toWrite)\n}\n')),(0,o.kt)("p",null,"I guess I will leave it as it is for now, until I can think of a better solution."))}m.isMDXComponent=!0}}]);